package co.edu.uniquindio.estructurasDatos.ProyectoFinal.controllers;

import co.edu.uniquindio.estructurasDatos.ProyectoFinal.model.Aerolinea;
import co.edu.uniquindio.estructurasDatos.ProyectoFinal.model.Usuario;
import co.edu.uniquindio.estructurasDatos.ProyectoFinal.persistencia.Persistencia;

public class ModelFactoryController {

	//Atributos de la clase ModelFactoryController

	Aerolinea aerolinea;


	//----------------------------------------------  Singleton ------------------------------------------------
	// Clase estatica oculta. Tan solo se instanciara el singleton una vez
	private static class SingletonHolder {
		// El constructor de Singleton puede ser llamado desde aquí al ser protected
		private final static ModelFactoryController eINSTANCE = new ModelFactoryController();
	}

	// Método para obtener la instancia de nuestra clase
	public static ModelFactoryController getInstance() {
		return SingletonHolder.eINSTANCE;
	}
	//-------------------------------------------Constructor-de-la-Clase-----------------------------------------

	/**
	 * Este es el meotodo constructor de la clase ModelFactoryController
	 */
	public ModelFactoryController() {
		System.out.println("invocación clase singleton");

		//Inicializar datos y luego guardarlo en archivos
		inicializarSalvarDatosPrueba();

		//Guardar y cargar el recurso serializable XML
		guardarResourceXML();
		cargarResourceXML();


		if(aerolinea == null){
			System.out.println("Aerolinea es null");

		}
	}

	private void inicializarSalvarDatosPrueba() {

		//Inicializar datos



	}
	private void cargarResourceXML() {

		aerolinea = Persistencia.cargarRecursoMarketplaceXML();

	}

	private void guardarResourceXML() {

		Persistencia.guardarRecursoMarketplaceXML(aerolinea);
	}

	public Aerolinea getAerolinea() {
		return aerolinea;
	}

	public void setAerolinea(Aerolinea aerolinea) {
		this.aerolinea = aerolinea;
	}

	public Usuario obtenerUsuario(String nombreUsuario) {

		return getAerolinea().obtenerUsuario(nombreUsuario);
	}
}
